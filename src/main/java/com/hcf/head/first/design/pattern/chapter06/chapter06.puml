@startuml
class Client{
}



class Invoker{
    +setCommand(Command command)

}



interface Command{
    void execute()
    void undo()
}


class Receiver{
    +void action()
}

class ConcreteCommand{
    void execute()
    void undo()
}


Command<|..ConcreteCommand
Invoker-right->Command
Client-right->Receiver
Client-right->ConcreteCommand
ConcreteCommand-left->Receiver


note left of Client : 客户端负责创建一个ConcreteCommand，并设置接受者
note bottom of Receiver : 接受者最终执行具体操作
note bottom of ConcreteCommand : 定义了动作和接受者之间的绑定关系，调用execute方法，即可调用了最终Receiver的动作。
note top of Invoker : 调用者设置持有的命令对象，调用时执行命令对象execute方法，最终是接收者执行。






@enduml